* SQL Assignment:

1) Statement to create the Contact table.

Ans. CREATE TABLE contact ( contactID int PRIMARY KEY AUTO_INCREMENT, companyID int, firstName varchar(45), lastName varchar(45), street varchar(45), city varchar(45), state varchar(45), zip varchar(10), isMain boolean, email varchar(100), phone int(20) );

2) Statement to create the Employee table.

Ans. CREATE TABLE employee ( employeeID int PRIMARY KEY AUTO_INCREMENT, firstName varchar(45), lastName varchar(45), salary decimal(10,2), hireDate date, jobTitle varchar(25), email varchar(100), phone varchar(20) );

3) Statement to create the ContactEmployee table.

Ans. CREATE TABLE contactEmployee ( contactEmployeeID int PRIMARY KEY AUTO_INCREMENT, contactID int, employeeID int, contactDate date, description varchar(100) );

4) In the Employee table, the statement that changes Lesley Bland’s phone number 
to 215-555-8800.

Ans. UPDATE employee SET phone = '215-555-8800' WHERE employeeID = 1;

5) In the Company table, the statement that changes the name of “Urban 
Outfitters, Inc.” to “Urban Outfitters”.

Ans. UPDATE company SET companyName = 'Urban Outfitters' WHERE companyID = 1;

6) In ContactEmployee table, the statement that removes Dianne Connor’s contact 
event with Jack Lee (one statement).

Ans. DELETE FROM contactemployee WHERE contactEmployeeID = 1;

7) Write the SQL SELECT query that displays the names of the employees that 
have contacted Toll Brothers (one statement). Run the SQL SELECT query in 
MySQL Workbench. Copy the results below as well. 

Ans. SELECT employee.employeeID, employee.firstName, company.companyName FROM employee JOIN contactemployee ON employee.employeeID = contactemployee.employeeID JOIN contact ON contact.contactID = contactemployee.contactID JOIN company ON company.companyID = contact.companyID WHERE company.companyName = "Toll Brothers";

Output. 

employeeID  |	firstName   |	companyName
---------------------------------------------	
2	    |	Dianne	    |	Toll Brothers
4	    |	Emily	    |	Toll Brothers

8) What is the significance of “%” and “_” operators in the LIKE statement? 

Ans. "%" Operator: The significance of "%" operator in the LIKE statement that represents zero, one or multiple characters.

-> "_" Operator: The significance of "_" operator in the LIKE statement that represents only single character.

9) What does a join in MySQL mean? 

Ans. Join is used to get the result from multiple tables, which share a common field and get a single result. As MySQL tables are logically linked with a common key value, JOINs can provide you data as per your need from the several tables by using just one query.

10) What do you understand about DDL, DCL, and DML in MySQL? 

Ans. 
-> DDL:
- DDL stands for Data Definition language.
- DDL command consists for the SQL statements that create, modify, view or delete the structure of the table.
- DDL command is used for structure of the table but not for the table data.
- DDL commands are:- CREATE, ALTER, TRUNCATE, DROP, COMMENT and RENAME.

-> DCL:
- DCL stands for Data Control Language.
- DCL command deals with the rights, permissions and other controls for the database system.
- DCL commands are:- GRANT and REVOKE.

-> DML:
- DML stands for Data Manipulation Language.
- DML command is used for data insertion, updation, deletion, and to apply lock on table.
- DML commands are: INSERT, UPDATE, DELETE, LOCK, CALL, and EXPLAIN PLAN.

11) What is the role of the MySQL JOIN clause in a query, and what are some 
common types of joins?

Ans. JOIN clause is used to get the result from multiple tables, which share a common field and get a single result. As MySQL tables are logically linked with a common key value, JOINs can provide you data as per your need from the several tables by using just one query.

- There are some types of joins in SQL:

1) Left Join: Left Join returns all records from the left table and matched records from the right table.

2) Right Join: Right Join returns all records from the right table and matched records from the left table.

3) Inner Join: Inner Join returns matched data from both of the tables.

4) Full Outer Join: Full Outer Join returns all of the records from both of the tables. But we cannot perform full outer join on PhpMyAdmin(PMA) because it doesn't support full outer join, but we can perform it by using the union of left join and right join. 